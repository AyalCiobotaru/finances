/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ac.myfinances.generated.api;

import ac.myfinances.generated.model.Account;
import ac.myfinances.generated.model.CreateAccountBody;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-06T20:19:28.485692-05:00[America/New_York]")

@Validated
@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /accounts/add : Create an account
     *
     * @param createAccountBody Create Account body (required)
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Create an account", nickname = "createAccount", notes = "", tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation") })
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/accounts/add",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> createAccount(@ApiParam(value = "Create Account body", required = true) @Valid @RequestBody CreateAccountBody createAccountBody) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/{id} : Get account by id
     *
     * @param id The id that needs to be fetched. Use 1 for testing.  (required)
     * @return successful operation (status code 200)
     *         or Account not found (status code 404)
     */
    @ApiOperation(value = "Get account by id", nickname = "getAccountById", notes = "", response = Account.class, tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Account.class),
        @ApiResponse(code = 404, message = "Account not found") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/{id}",
        produces = { "application/json" }
    )
    default ResponseEntity<Account> getAccountById(@ApiParam(value = "The id that needs to be fetched. Use 1 for testing. ", required = true) @PathVariable("id") String id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"balance\" : 0.8008282, \"name\" : \"name\", \"parentCategory\" : \"parentCategory\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts : Get all accounts
     *
     * @return successful operation (status code 200)
     */
    @ApiOperation(value = "Get all accounts", nickname = "getAllAccounts", notes = "", response = Account.class, responseContainer = "List", tags={ "Accounts", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Account.class, responseContainer = "List") })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Account>> getAllAccounts() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"balance\" : 0.8008282, \"name\" : \"name\", \"parentCategory\" : \"parentCategory\", \"id\" : \"id\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
