buildscript {
    repositories {
        mavenLocal()
        mavenCentral()

    }

    /**
     * Loading gradle tasks for creating RPMs and swagger utilities.
     */
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.2.0'
        classpath "org.openapitools:openapi-generator-gradle-plugin:$openApiGeneratorVersion"
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:4.4.0'
        classpath "com.moowork.gradle:gradle-node-plugin:1.2.0"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.28.3"
    }
}

plugins {
    id 'java'
    id 'org.openapi.generator' version "$openApiGeneratorVersion"
    id "org.springframework.boot" version "$springBootVersion"
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'org.hidetake.swagger.generator' version "$hidetakeSwaggerVersion"
    id 'jacoco'
    id 'com.moowork.node' version '1.2.0'
    id 'org.gradle.crypto.checksum' version '1.1.0'
    id "com.jfrog.artifactory" version "4.28.3"
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'org.openapi.generator'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'war'

defaultTasks 'clean', 'generateServerApi', 'generateAngularTypescriptApi',  'generateSwaggerUI', 'build', 'createWarChecksums'

import org.apache.tools.ant.taskdefs.condition.Os

dependencies {
    // log4j override
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.apache.logging.log4j') {
                details.useVersion '2.17.1'
            }
        }
    }

    implementation('org.apache.logging.log4j:log4j') {
        version {
            strictly '2.17.1'
        }
    }

    configurations.implementation {
        exclude group: 'log4j', module: 'log4j'
    }

    implementation "org.springframework.boot:spring-boot-starter"
    implementation("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }

    implementation 'org.modelmapper:modelmapper:2.3.0'
    implementation 'org.modelmapper.extensions:modelmapper-jackson:2.3.0'
    implementation "org.springframework.boot:spring-boot-starter-web"
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    implementation "io.swagger:swagger-annotations:$swaggerAnnotationsVersion"
    implementation "javax.validation:validation-api:$javaxValidationVersion"
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'org.openapitools:jackson-databind-nullable:0.2.1'
    implementation "io.springfox:springfox-swagger2:$springFoxVersion"
    implementation 'mysql:mysql-connector-java:8.0.15'
    implementation 'org.springframework.security:spring-security-web:4.1.2.RELEASE'
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-joda"

    //testCompile group: "junit", name: "junit", version: "$junitVersion"
    testImplementation("org.springframework.boot:spring-boot-starter-test") {
        exclude group: "org.junit.vintage", module: "junit-vintage-engine"
    }

    testImplementation "org.hsqldb:hsqldb:$hsqldbVersion"

    swaggerUI "org.webjars:swagger-ui:$swaggerUiVersion"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

def eagerlyFetchedVersion="$autoGeneratedFrontEndVersion"
repositories {
    mavenLocal()
    mavenCentral()

}

sourceSets{
    main {
        java {
            srcDirs = ['src/main/java',
                       'src/generated/java']
        }
        resources {
            srcDirs = ['src/main/resources',
                       'src/generated/resources']
        }
    }
}

swaggerSources {
    finances {
        inputFile = file("$rootDir/swagger/index.yaml")
        ui {
            outputDir = file("$rootDir/Server/src/generated/resources/static/")
        }
    }
}



task generateServerApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
    group "Custom"
    description "Generate the Server Api"

    generatorName = "spring"
    inputSpec = "$rootDir/swagger/index.yaml".toString()
    outputDir = "$rootDir/Server/src/generated".toString()
    templateDir = "$rootDir/swagger/templates"
    apiPackage = "ac.myfinances.generated.api"
    modelPackage = "ac.myfinances.generated.model"
    validateSpec = false
    configOptions = [
            sourceFolder: "java",
            interfaceOnly: "true",
            serializableModel: "true",
            describeAllEnumsAsStrings: "true"
    ]
}

task generateAngularTypescriptApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
    group "Custom"
    description "Generate the Angular TS Api"

    generatorName = "typescript-angular"
    inputSpec = "$rootDir/swagger/index.yaml".toString()
    outputDir = "$rootDir/Widget/src/generated/ts".toString()
    apiPackage = "api"
    modelPackage = "model"
    validateSpec = false
    configOptions = [
            interfaceOnly: "true",
            serializableModel: "true",
            ngVersion: "14.2.2",
            npmVersion: eagerlyFetchedVersion,
            // when trying to use version.toString() or "$version", the property wasn't evaluated yet and it was returning
            // "task ':generateAngularTypescriptApi' property 'version'" instead of evaluating the org.gradle.api.internal.provider.DefaultProperty.
            // Couldn't use version.get() because it returned an error saying version didn't have a value meaning this config was getting evaulated
            // before the gradle.properties. Creating a placeholder allowed the value to be passed in by eagerly fetching what version was
            sourceMap: "true",
            supportsES6: "true"
    ]
}

task swaggerClean(type: Delete) {
    doFirst {
        delete 'src/generated'
    }
}

openApiValidate {
    inputSpec = "$rootDir/src/main/swagger/index.yaml".toString()
    recommend = true
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
    }
}

springBoot {
    mainClass = 'ac.myfinances.MyFinancesServer'
}

// Enable gradle variable expansion in resource files.
processResources {
    filesMatching('application.properties') {
        expand(project.properties)
    }
}

jar {
    include "**/api/*.class", "**/model/*.class", "**/owf/dao/*.class"
    includeEmptyDirs = false
    enabled = true
}

bootJar {
    archiveClassifier = 'boot'
    enabled = true
}

bootWar {
    archiveFileName = "myFinances#${version}.war"
}

task npmInstallFrontEnd(type: Exec) {

    String npm = 'npm';

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        npm = 'npm.cmd'
    }

    workingDir 'src/generated/ts'
    commandLine npm, 'install', '--legacy-peer-deps'
}

task npmBuildFrontEnd(type: NpmTask) {
    args = ["--prefix", "src/generated/ts", "run", "build"]
}

task publishFrontEnd(type: NpmTask) {
    args = ['publish', 'src/generated/ts/dist']
}

bootWar.doLast { task ->
    ant.checksum file: task.archivePath
}


def bumpVersion(String version) {
    logger.lifecycle("Old version ${version}");
    String[] splitVersion;
    splitVersion = version.split('\\.');
    int newPatchVersion = (splitVersion[2] as int) + 1;
    return "${splitVersion[0]}.${splitVersion[1]}.${newPatchVersion}"

}

task updateVersion() {
    group "Custom"
    description "Bumps the gradle.properties version"

    doLast {
        def propertiesFile = new File("${project.projectDir}/gradle.properties")
        FileInputStream fis = new FileInputStream(propertiesFile)
        Properties props = new Properties()

        props.load(fis)
        fis.close()

        props.setProperty("version", bumpVersion(props['version']))

        FileOutputStream fos = new FileOutputStream(propertiesFile)
        props.store(fos, "Bumped Version")
        fos.close()

    }
}

clean.dependsOn(swaggerClean)

generateServerApi.dependsOn(clean)
publishFrontEnd.dependsOn(npmBuildFrontEnd)
npmBuildFrontEnd.dependsOn(npmInstallFrontEnd)
npmInstallFrontEnd.dependsOn(generateAngularTypescriptApi)

