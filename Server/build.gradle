plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.openapi.generator' version '5.3.0'
    id 'java'
}

dependencies {
    // log4j override
    configurations.all {
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.group == 'org.apache.logging.log4j') {
                details.useVersion '2.17.1'
            }
        }
    }

    implementation('org.apache.logging.log4j:log4j') {
        version {
            strictly '2.17.1'
        }
    }

    configurations.implementation {
        exclude group: 'log4j', module: 'log4j'
    }

    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-rsocket'
    implementation 'io.projectreactor:reactor-tools'
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'
    implementation 'org.hibernate:hibernate-annotations:3.5.6-Final'

    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'dev.miku:r2dbc-mysql'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

//	monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

//	swagger
    implementation("io.springfox:springfox-boot-starter:3.0.0")


    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'

}

sourceCompatibility = 11
targetCompatibility = 11

def eagerlyFetchedVersion="$autoGeneratedFrontEndVersion"
repositories {
    mavenCentral()
    maven { url 'https://oss.jfrog.org/artifactory/oss-snapshot-local/' }
    maven { url 'https://repo1.maven.org/maven2' }

}

//test {
//    useJUnitPlatform()
//    finalizedBy jacocoTestReport // report is always generated after tests run
//}

springBoot {
    mainClass = 'ac.myfinances.MyFinancesServer'
}

// Enable gradle variable expansion in resource files.
//processResources {
//    filesMatching('application.properties') {
//        expand(project.properties)
//    }
//}
//
//jar {
//    include "**/api/*.class", "**/model/*.class", "**/owf/dao/*.class"
//    includeEmptyDirs = false
//    enabled = true
//}
//
//bootJar {
//    archiveClassifier = 'boot'
//    enabled = true
//}
//
//bootWar {
//    archiveFileName = "myFinances#${version}.war"
//}
//
//bootWar.doLast { task ->
//    ant.checksum file: task.archivePath
//}
//
//task generateServerApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
//    group "Custom"
//    description "Generate the Server Api"
//
//    generatorName = "spring"
//    inputSpec = "$rootDir/swagger/index.yaml".toString()
//    outputDir = "$rootDir/Server/src/generated".toString()
//    templateDir = "$rootDir/swagger/templates"
//    apiPackage = "ac.myfinances.generated.api"
//    modelPackage = "ac.myfinances.generated.model"
//    validateSpec = false
//    configOptions = [
//            sourceFolder: "java",
//            interfaceOnly: "true",
//            serializableModel: "true",
//            describeAllEnumsAsStrings: "true"
//    ]
//}
//
//task generateAngularTypescriptApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask){
//    group "Custom"
//    description "Generate the Angular TS Api"
//
//    generatorName = "typescript-angular"
//    inputSpec = "$rootDir/swagger/index.yaml".toString()
//    outputDir = "$rootDir/Server/src/generated/ts".toString()
//    apiPackage = "api"
//    modelPackage = "model"
//    validateSpec = false
//    configOptions = [
//            interfaceOnly: "true",
//            serializableModel: "true",
//            ngVersion: "14.2.2",
//            npmVersion: eagerlyFetchedVersion,
//            // when trying to use version.toString() or "$version", the property wasn't evaluated yet and it was returning
//            // "task ':generateAngularTypescriptApi' property 'version'" instead of evaluating the org.gradle.api.internal.provider.DefaultProperty.
//            // Couldn't use version.get() because it returned an error saying version didn't have a value meaning this config was getting evaulated
//            // before the gradle.properties. Creating a placeholder allowed the value to be passed in by eagerly fetching what version was
//            sourceMap: "true",
//            supportsES6: "true"
//    ]
//}


//def bumpVersion(String version) {
//    logger.lifecycle("Old version ${version}");
//    String[] splitVersion;
//    splitVersion = version.split('\\.');
//    int newPatchVersion = (splitVersion[2] as int) + 1;
//    return "${splitVersion[0]}.${splitVersion[1]}.${newPatchVersion}"
//
//}
//
//task updateVersion() {
//    group "Custom"
//    description "Bumps the gradle.properties version"
//
//    doLast {
//        def propertiesFile = new File("${project.projectDir}/gradle.properties")
//        FileInputStream fis = new FileInputStream(propertiesFile)
//        Properties props = new Properties()
//
//        props.load(fis)
//        fis.close()
//
//        props.setProperty("version", bumpVersion(props['version']))
//
//        FileOutputStream fos = new FileOutputStream(propertiesFile)
//        props.store(fos, "Bumped Version")
//        fos.close()
//
//    }
//}
